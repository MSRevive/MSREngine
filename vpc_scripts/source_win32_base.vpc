// Settings for /analyze are in a separate .vpc file so that they can be
// changed without triggering a full rebuild of non-analyze builds. On non-analyze
// builds the analyze.vpc file will not be listed as a dependency.
$Include "$SRCDIR\vpc_scripts\source_win32_analyze.vpc" [$ANALYZE]

$Configuration
{
	$General
	{
		// Request a specific compiler toolset.
		$PlatformToolset "v100" [!$VS2022 && $VS2010]
		$PlatformToolset "v110_xp" [!$VS2022 && $VS2012 && !$ANALYZE] // VS 2012 targeting Windows XP - http://msdn.microsoft.com/en-us/library/vstudio/jj851139.aspx
		$PlatformToolset "v110" [!$VS2022 && $VS2012 && $ANALYZE] // VS 2012 for /analyze
		$PlatformToolset "v120_xp" [!$VS2022 && $VS2013 && !$ANALYZE] // VS 2013 targeting Windows XP - http://msdn.microsoft.com/en-us/library/vstudio/jj851139.aspx
		$PlatformToolset "v120" [!$VS2022 && $VS2013 && $ANALYZE] // VS 2013 for /analyze
		$PlatformToolset "v143" [$VS2022]
	}

	$General
	{
		$ExecutableDirectories "$(ExecutablePath);$(Path)"
		// We need to override mt.exe for Win7 compatibiity.  Append paths before $(ExecutablePath) if you need VS to use your tools rather than its own
		$ExecutableDirectories "$SRCDIR\devtools\vstools;$BASE"
		// VS 2012 compiles fine but does not link. We want to redirect to stub versions of
		// the tools (like link.exe and mt.exe) so that the link stage will be NOPed when
		// doing /analyze builds.
		$ExecutableDirectories "$SRCDIR\devtools\vs_nop_tools;$BASE" [$ANALYZE]
	}

	$Compiler
	{
		$MultiProcessorCompilation "True"

		// Remove warnings from warning level 4.
		// 4018  signed unsigned mismatch
		// 4316  warning object allocated on the heap may not be aligned 16
		// 4514  warning C4514: 'acosl' : unreferenced inline function has been removed
		// 4100  warning C4100: 'hwnd' : unreferenced formal parameter
		// 4127  warning C4127: conditional expression is constant
		// 4512  warning C4512: 'InFileRIFF' : assignment operator could not be generated
		// 4611  warning C4611: interaction between '_setjmp' and C++ object destruction is non-portable
		// 4710  warning C4710: function 'x' not inlined
		// 4702  warning C4702: unreachable code
		// 4505  unreferenced local function has been removed
		// 4239  nonstandard extension used : 'argument' ( conversion from class Vector to class Vector& 
		// 4097  typedef-name 'BaseClass' used as synonym for class-name 'CFlexCycler::CBaseFlex'
		// 4324  Padding was added at the end of a structure
		// 4244  type conversion warning.
		// 4305  truncation from 'const double ' to 'float '
		// 4786  Disable warnings about long symbol names
		// 4250  'X' : inherits 'Y::Z' via dominance
		// 4201  nonstandard extension used : nameless struct/union
		// 4481  warning C4481: nonstandard extension used: override specifier 'override'
		// 4748  warning C4748: /GS can not protect parameters and local variables from local buffer overrun because optimizations are disabled in function
		// 4511 Disable warnings about private copy constructors
		// 4121 warning C4121: 'symbol' : alignment of a member was sensitive to packing
		// 4530 warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc (disabled due to std headers having exception syntax
		// 4996 functions declared deprecated
		// 4267 conversion from 'size_t' to 'int', possible loss of data
		// 4311 pointer truncation from 'char *' to 'int'
		// 4312 conversion from 'unsigned int' to 'memhandle_t' of greater size
		// warning C4838: conversion from 'x' to 'y' requires a narrowing conversion
		// warning C4456: declaration of 'x' hides previous local declaration
		// warning C4457: declaration of 'x' hides function parameter
		// warning C4458: declaration of 'x' hides class member
		// warning C4459: declaration of 'x' hides global declaration
		// warning C26495: uninitialized variable
		// warning C6031: return value ignored
		// warning C28251: Inconsistent annotation (???)
		// warning C28252: Inconsistent annotation (???)
		// warning C5205: delete of an abstract class 'x' that has a non-virtual destructor results in undefined behavior		
		
		$DisableSpecificWarnings	"$BASE;4316;4018;4100;4514;4127;4512;4611;4710;4702;4505;4239;4097;4324;4244;4305;4786;4250;4201;4481;4748;4511;4121;4530;4996;4267;4311;4312" [!$VS2022 && $VS2013]
		$DisableSpecificWarnings	"$BASE;4100;4018;4514;4127;4512;4611;4710;4702;4505;4239;4097;4324;4244;4305;4786;4250;4201;4481;4748;4511;4121;4530;4996;4267;4311;4312;4838;4456;4457;4458;4459;26495;6031;28251;28252;5205" [$VS2022]

		// Having lots of warnings makes it harder to notice new, and possibly
		// important warnings, both on buildbot and in the output window. Lots
		// of warnings also makes it harder to skip through errors in the output
		// window since F8 stops on both warnings and errors. The only way to
		// keep the warning count down is to have warnings-as-errors.
		// We will not be warning free on 64-bit for a while...
		$TreatWarningsAsErrors					"No"

		// Defines to differentiate 32 from 64 bit builds
		$PreprocessorDefinitions			"$BASE;PLATFORM_64BITS;WIN64;_WIN64;COMPILER_MSVC64" [$WIN64]
		$PreprocessorDefinitions			"$BASE;COMPILER_MSVC32" [$WIN32]
		
		$PreprocessorDefinitions			"$BASE;USE_VS2022" [$VS2022]

		// /Gw is a VS 2013 option that puts global and static variables in individual sections so that the
		// linker can discard unreferenced data. When building @client /dota with linker optimizations this
		// reduces the client.dll size by about 1.14%. When linker optimizations are disabled this has no
		// effect. This option does not show up in the IDE so we need to add it in $AdditionalOptions.
		// http://blogs.msdn.com/b/vcblog/archive/2013/09/11/introducing-gw-compiler-switch.aspx
		$AdditionalOptions	"$BASE /Gw" [$VS2013]
		// Strip unreferenced inline functions from object files to shrink .obj files and .lib files,
		// improve linker speed, and improve conformance. Requires VS 2013 Update 3
		$AdditionalOptions	"$BASE /Zc:inline" [$VS2013]
	}
}
